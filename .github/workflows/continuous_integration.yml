name: continuous integration

on:
  pull_request:
    branches: [ main ]

env:
  ELIXIR_VERSION: 1.13.4
  OTP_VERSION: 24.3.4.2

jobs:
  linux:
    name: Build & Test on Linux
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:13.1
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Restore elixir & erlang cache
      id: erlef-cache
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/work/_temp/.setup-beam/elixir
          /home/runner/.mix
        key: ${{ runner.os }}-elixir_${{ env.ELIXIR_VERSION }}-erlang_${{ env.OTP_VERSION }}
        restore-keys: ${{ runner.os }}-elixir_${{ env.ELIXIR_VERSION }}-erlang_${{ env.OTP_VERSION }}

    - name: Set up Elixir
      uses: erlef/setup-elixir@v1
      if: steps.erlef-cache.outputs.cache-hit != 'true'
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}

    - name: Restore dependencies cache
      id: mix-cache
      uses: actions/cache@v2
      with:
        path: |
          deps
          _build
          tmp
          tmp/plts
        key: ${{ runner.os }}-mix_${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix_

    - name: Install dependencies
      if: steps.mix-cache.outputs.cache-hit != 'true'
      run: |
        mix deps.get
        mix deps.compile

    - name: Check compilation (dev)
      run: mix compile --warnings-as-errors
      env:
        MIX_ENV: dev

    - name: Check compilation (test)
      run: mix compile --warnings-as-errors
      env:
        MIX_ENV: test

    - name: Create dialyzer plt file
      run: |
        mkdir -p tmp/plts
        mix dialyzer --plt

    - name: Check format
      run: mix format --check-formatted

    - name: Run type check
      run: mix dialyzer

    - name: Analyze code
      run: mix credo -a

    - name: Analyse security
      run: cd src/exathena && mix sobelow

    - name: Run tests & code coverage
      run: mix coveralls --umbrella
      env:
        MIX_ENV: test

  macos:
    name: Build & Test on macOS
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Restore elixir & erlang cache
      id: asdf-cache
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/.asdf
          /home/runner/.mix
        key: ${{ runner.os }}-elixir_${{ env.ELIXIR_VERSION }}-erlang_${{ env.OTP_VERSION }}
        restore-keys: ${{ runner.os }}-elixir_${{ env.ELIXIR_VERSION }}-erlang_${{ env.OTP_VERSION }}

    - name: Set up ASDF
      if: steps.asdf-cache.outputs.cache-hit != 'true'
      run: |
        brew update
        brew install asdf
        asdf plugin-add erlang
        asdf plugin-add elixir
        echo "$HOME/.asdf/shims" >> $GITHUB_PATH

    - name: Set up Erlang
      if: steps.asdf-cache.outputs.cache-hit != 'true'
      run: |
        asdf install erlang ${{ env.OTP_VERSION }}
        asdf global erlang ${{ env.OTP_VERSION }}
        asdf reshim

    - name: Set up Elixir
      if: steps.asdf-cache.outputs.cache-hit != 'true'
      run: |
        asdf install elixir ${{ env.ELIXIR_VERSION }}
        asdf global elixir ${{ env.ELIXIR_VERSION }}
        asdf reshim

    - name: Setup hex and rebar
      run: |
        mix local.rebar --force
        mix local.hex --force

    - name: Set up Postgres
      run: |
        brew services start postgresql
        echo "Check PostgreSQL service is running"
        i=10
        COMMAND='pg_isready'
        while [ $i -gt 0 ]; do
            echo "Check PostgreSQL service status"
            eval $COMMAND && break
            ((i--))
            if [ $i == 0 ]; then
                echo "PostgreSQL service not ready, all attempts exhausted"
                exit 1
            fi
            echo "PostgreSQL service not ready, wait 10 more sec, attempts left: $i"
            sleep 10
        done

    - name: Create postgres user at PostgreSQL
      run: |
        psql --command="CREATE USER postgres PASSWORD 'postgres'" --command="\du" postgres
        psql --command="ALTER USER postgres WITH SUPERUSER" --command="\du" postgres

    - name: Restore dependencies cache
      id: mix-cache
      uses: actions/cache@v2
      with:
        path: |
          deps
          _build
          tmp
          tmp/plts
        key: ${{ runner.os }}-mix_${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix_

    - name: Install dependencies
      if: steps.mix-cache.outputs.cache-hit != 'true'
      run: |
        mix deps.get
        mix deps.compile

    - name: Check compilation (dev)
      run: mix compile --warnings-as-errors
      env:
        MIX_ENV: dev

    - name: Check compilation (test)
      run: mix compile --warnings-as-errors
      env:
        MIX_ENV: test

    - name: Create dialyzer plt file
      run: |
        mkdir -p tmp/plts
        mix dialyzer --plt

    - name: Check format
      run: mix format --check-formatted

    - name: Run type check
      run: mix dialyzer

    - name: Analyze code
      run: mix credo -a

    - name: Analyse security
      run: cd src/exathena && mix sobelow

    - name: Run tests & code coverage
      run: mix coveralls --umbrella
      env:
        MIX_ENV: test

  windows:
    name: Build & Test on Windows
    runs-on: windows-latest

    steps:
    - name: Configure Git
      run: git config --global core.autocrlf input

    - uses: actions/checkout@v2

    - name: Restore elixir & erlang cache
      id: erlef-cache
      uses: actions/cache@v2
      with:
        path: |
          D:\a\_temp\.setup-beam\elixir
          C:\Users\runneradmin\.mix
        key: ${{ runner.os }}-elixir_${{ env.ELIXIR_VERSION }}-erlang_${{ env.OTP_VERSION }}
        restore-keys: ${{ runner.os }}-elixir_${{ env.ELIXIR_VERSION }}-erlang_${{ env.OTP_VERSION }}

    - name: Set up Elixir
      if: steps.erlef-cache.outputs.cache-hit != 'true'
      uses: erlef/setup-elixir@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}

    # Add tar that supports symlinks, see https://github.com/actions/virtual-environments/issues/4679
    - name: Add tar.exe
      run: |
        "C:\Program Files\Git\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8

    - name: Set up Postgres
      run: |
        $pgService = Get-Service -Name postgresql*
        Set-Service -InputObject $pgService -Status running -StartupType automatic
        Start-Process -FilePath "$env:PGBIN\pg_isready" -Wait -PassThru
        echo "$env:PGBIN" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Create postgres user at PostgreSQL
      run: |
        & $env:PGBIN\psql --command="ALTER USER postgres WITH PASSWORD 'postgres'" --command="\du"

    - name: Restore dependencies cache
      id: mix-cache
      uses: actions/cache@v2
      with:
        path: |
          deps
          _build
          tmp
          tmp/plts
        key: ${{ runner.os }}-mix_${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix_

    - name: Install dependencies
      if: steps.mix-cache.outputs.cache-hit != 'true'
      run: |
        mix deps.get
        mix deps.compile

    - name: Check compilation (dev)
      run: mix compile --warnings-as-errors
      env:
        MIX_ENV: dev

    - name: Check compilation (test)
      run: mix compile --warnings-as-errors
      env:
        MIX_ENV: test

    - name: Create dialyzer plt file
      run: |
        New-Item -ItemType Directory -Force -Path .\tmp\plts
        mix dialyzer --plt

    - name: Check format
      run: mix format --check-formatted

    - name: Run type check
      run: mix dialyzer

    - name: Analyze code
      run: mix credo -a

    - name: Analyse security
      run: cd src/exathena && mix sobelow

    - name: Run tests & code coverage
      run: mix coveralls --umbrella
      env:
        MIX_ENV: test
